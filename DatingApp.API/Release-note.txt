-------------------------------------------
Extended User Class and adding photo Class
-------------------------------------------
1- specifying a navigation property such as public ICollection<Photo> Photos { get; set; } won't allow delete on cascade
   we will get a 'onDelete: ReferentialAction.Restrict', we won't change migration code because is auto-gen to correct this public  

2- dotnet ef migrations remove : will remove the last migrations
3- after we run : 'dotnet ef database update' we no longer be able to revert back to the previous stage
e.g :  'dotnet ef database update AddUserEntity' will fail due to sqlite and not EF, see for more...
https://docs.microsoft.com/en-us/ef/core/providers/sqlite/limitations

4- we could drop the database and run migration until the point of 'AddUserEntity'
and we need to seed the db based on json file
    a- 'dotnet ef database drop', migrations will be stil available
    b- 'dotnet ef database update AddUserEntity'
    c- do the necessary changes to allow the delete on cascade : change the nav property accordingly
        add to photo Class: 
        public User User { get; set; }
        public int UserId { get; set; }

    d- remove the old migrations: 'dotnet ef migrations remove' & 
        add the new one 'dotnet ef migrations add ExtendedUserClass' &
        run 'dotnet ef database update' again.


5- to generate a seed based on a json file visit : https://www.json-generator.com/
6- inject the seed in startup : services.AddTransient<Seed>() and call for seeder.SeedUser();
7- we need to create DTO for User and Photo so to hide and recalculate sensible fields (hashed pass and salt), 
    - a : an automapper (nuget : AutoMapper.Extensions.Microsoft.DependencyInjection -Version 4.1.1)
    is available to map the field between our entities and DTO's
    - b: need to be injected and also the mapping is done through the class Helpers.AutoMapperProfile
8- an UsersController need to be created and to be protected
9- so far, all the tests are run through postman!!! 

-------------------------------------------
Update API to receive a put request and update a profile
-------------------------------------------
- update UsersController by adding
[HttpPut("{id}")]
            public async Task<IActionResult> UpdateUser(int id, UserForUpdateDto userForUpdateDto)
            {   

                /*
                  we need to match the user attempting to update his profile matching the 
                  id which part of the token in the server
                */         
                if (id != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))   return Unauthorized();
                
                var userFroRepo = await _repo.GetUser(id);  
                _mapper.Map(userForUpdateDto, userFroRepo); 

                if (await _repo.SaveAll()) return NoContent();
                
                throw new Exception($"updating user with {id} failed");
            }

    ---------------------------------------------------------
    photos(upload, removal, profile update,...), adding PhotosController, Couldinary Cloud
    --------------------------------------------------------
        1- Create a Couldinary account:
            Cloud name : dzaqp6jnu
            API key:813335792476897
            API secret: QFuIZGlEEqT9CT1_V9cL6A1D5ns
            Environment variable:cloudinary://813335792476897:QFuIZGlEEqT9CT1_V9cL6A1D5ns@dzaqp6jnu/
            Cloudinary::Uploader.upload("sample.jpg", :crop => "limit", :tags => "samples", :width => 3000, :height => 2000)
            See doc for .Net : https://cloudinary.com/documentation/dotnet_integration#_net_getting_started_guide

        2- Create a photosController which take a photo and upload it to Cloudinary.
        3- delete photo from database and cloudinary
        4- control if the user has the right access before changing anything in his profile!
        5- rendering of customs entities (DTO's) instead of real entities to keep sensible data from leaking out
        6- AutoMapper usage between  customs entities (DTO's) and persisted entities.
        7- adding PhotosController for photos management




