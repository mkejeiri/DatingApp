---------------------------------------------------------
adding alertifyjs, angular JWT, NGX Bootstrap, Bootswatch
----------------------------------------------------------
1- alertifyjs: allow us to display beautiful alert on screen, see more on https://alertifyjs.com/
    npm install alertifyjs --save
    a- we need to add "node_modules/alertifyjs/build/alertify.js" in script  angular.json
    b- create a service wrapper around alertify:
        1- declare 'alertify.js' in script angular.json
        2- import "alertify.min.css" and 'themes/bootstrap.min.css' in style.css
        3- create a service AlertifyService
        4- declare 'declare let alertify: any;'
        5- redefine methods confirm,success,error,warning,message
        6- Inject the service into the app.module to make available accross app.

2-  angular JWT allow us to check if the token is expired and doesn't change anything on security level
    See more on https://github.com/auth0/angular2-jwt
    npm install @auth0/angular-jwt@2.0.0

3- Using NGX Bootstrap instead of jquery, because it promotes components usage, same idea as angular, we could also use jquery!  
    npm install ngx-bootstrap@3.0.1 --save

4- bootswatch allow us to get a nice themes and colors
    npm install bootswatch@4.1.1
    we use united themes by adding : @import "../node_modules/bootswatch/dist/united/bootstrap.min.css" 
    to the styles.css
----------------------------------------------------------
Routing :angular out of the box solution
----------------------------------------------------------
    1- creating components: messages, members, lists
    2- adding: routerLinkActive="active" & [routerLink]="['/messages']"
    3- creating a routes in file routes.routing.ts
    4- adding the routing to appModule
    5- protecting the route - create an AuthGuard : ng g guard auth --spec=false, implement canActivate method
    6- protecting multiple route at once: re-arrange childeren components that need authorisation access 
    7- use wild card for default routing (use '' instead of 'home')



-----------------------------------------------------------------------------
Adding : route resolver, using built-in interceptors jwt,ngx bootstrap, ngx-gallery 
-----------------------------------------------------------------------------
1- auth0/angular2-jwt interceptors authorization headers: https://github.com/auth0/angular2-jwt
    after injecting the JwtHelperService into the appModule and some config such as :
        export function tokenGetter() {
        return localStorage.getItem('access_token');
        }

        JwtModule.forRoot({
            config: {
                tokenGetter: tokenGetter,
                whitelistedDomains: ['localhost:5000'],
                blacklistedRoutes: ['localhost:5000/api/auth']
            }
            })
            
    the framework use 'JwtModule' which will retrieve automatically the token, intercept all requests going to localhost:5000 and add the headerOptions into the request before sending them to the server, and also ignoring the blacklistedRoutes,
    such as : 'localhost:5000/api/auth'

2- ngx bootstrap tab : see https://valor-software.com/ngx-bootstrap/?gclid=Cj0KCQjw3KzdBRDWARIsAIJ8TMSsxAx35og1c2aaaXXVhqX7YzcK_sXw6IW2gkbPzY5p3ioDo_Ic1QsaAqyaEALw_wcB#/tabs
2- route resolver allow us to reload the data before even the component get loaded the avoid access 
    to properties when they are not yet available. As a temporary solution we could use ? to make them optional
    e.g: user?.name, see https://angular.io/api/router/Resolve

    a- we need to create the resolver manually (file) add it to the providers list of the appModule
    b- use it in thr file routing by specifying the keyword resolver and the property (e.g. prop = 'user' or 'uses') that we will retrieve from activatedRoute.params['prop'].
    eg: inside my component for users property
                ngOnInit() {
                this.route.data.subscribe(
                    (data) => {
                    this.users = data['users'];
                    }
                );
                }
3- use ngx gallery: https://www.npmjs.com/package/ngx-gallery
    a- npm install ngx-gallery@5.3.2 --save and follow the intruction on https://www.npmjs.com/package/ngx-gallery


-----------------------------------------------------------------------------
created user profile component and allow user to update his/her profile
-----------------------------------------------------------------------------
1- created a edit profile component
2- canDesactivate route guard
3- adding 'HostListener' to prevent user to close browser in case of changes
    @HostListener('window:beforeunload', ['$event'])
    unloadNotification($event: any) {
        if (this.editForm.dirty) {
        $event.returnValue = true;
        }
    }
4- using @ViewChild to access to the form component template and reset it and test if it's dirty
    @ViewChild('editForm') editForm: NgForm;

5- persisted changes to the API
6- use of Output with event emitter and replacement with BehaviorSubject
differences summarized.

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃         Observable                  ┃     BehaviorSubject/Subject         ┃      
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫ 
│ Is just a function, no state        │ Has state. Stores data in memory    │
├─────────────────────────────────────┼─────────────────────────────────────┤
│ Code run for each observer          │ Same code run                       │
│                                     │ only once for all observers         │
├─────────────────────────────────────┼─────────────────────────────────────┤
│ Creates only Observable             │Can create and also listen Observable│
│ ( data producer alone )             │ ( data producer and consumer )      │
├─────────────────────────────────────┼─────────────────────────────────────┤
│ Usage: Simple Observable with only  │ Usage:                              │
│ one Obeserver.                      │ * Store data and modify frequently  │
│                                     │ * Multiple observers listen to data │
│                                     │ * Proxy between Observable  and     │
│                                     │   Observer                          │
└─────────────────────────────────────┴─────────────────────────────────────┘

7- implement of deletion and main photo settings and the usage of localhost to store user along with its token
8- showing also the thumbnail picture as an icone along with the name of logged in user and sync of all photos 
    when they change to main photo.



-----------------------------------------------------------------------------
Expanding register form
-----------------------------------------------------------------------------
1 - use of reactive form and validation, better that template form approach, it keeps html clean
2 - adding customs validation such as confirm password
3 - date PB: date type  (datepicker) is not implemented and it's up the browser to implement this, some browser
    doesn't implement this and we need to keep a uniform UI browser wide!, see more : https://caniuse.com/
4- adding a default user photo from asset in case there isn't any.

-----------------------------------------------------------------------------
Date formating : Memeber since & Last Active
-----------------------------------------------------------------------------
1 - use of {{user.created|date:'mediumDate'}}
2 - use of {{user.lastActive|timeAgo}} more see: https://www.npmjs.com/package/time-ago-pipe  